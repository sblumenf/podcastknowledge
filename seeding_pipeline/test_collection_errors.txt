============================= test session starts ==============================
platform linux -- Python 3.11.2, pytest-7.4.3, pluggy-1.6.0 -- /home/sergeblumenfeld/podcastknowledge/seeding_pipeline/venv/bin/python
cachedir: .pytest_cache
rootdir: /home/sergeblumenfeld/podcastknowledge/seeding_pipeline
configfile: pyproject.toml
testpaths: tests
plugins: anyio-3.7.1, mock-3.12.0, cov-4.1.0, asyncio-0.21.1
asyncio: mode=Mode.STRICT
collecting ... collected 490 items / 54 errors

<Package tests>
  Test suite for podcast knowledge graph pipeline.
  <Module test_smoke.py>
    Smoke tests for podcast knowledge pipeline.
    These tests verify basic functionality without external dependencies.
    <Class TestDataLoading>
      Test data loading and validation.
      <Function test_load_sample_transcripts>
        Test that sample transcripts load correctly.
      <Function test_transcript_structure>
        Test that each transcript has required fields.
      <Function test_segment_structure>
        Test that segments have required fields.
    <Class TestEdgeCases>
      Test edge case handling.
      <Function test_empty_transcript>
        Test handling of empty transcript.
      <Function test_foreign_language>
        Test handling of mixed language content.
      <Function test_technical_jargon>
        Test handling of technical content.
      <Function test_advertisement_detection>
        Test advertisement segment detection.
    <Class TestConfiguration>
      Test configuration handling.
      <Function test_config_structure>
        Test that configuration has required fields.
      <Function test_config_validation>
        Test configuration value validation.
    <Class TestSuccessCriteria>
      Document success criteria for the refactoring.
      <Function test_success_criteria_defined>
        Ensure success criteria are documented.
    <Class TestEndToEnd>
      End-to-end tests for basic podcast processing.
      <Function test_process_simple_podcast>
        Test processing a simple podcast end-to-end.
<Module tests/api/test_v1_api.py>
  Tests for API v1 functionality and versioning.
  <Class TestAPIVersioning>
    Test API versioning functionality.
    <Function test_get_api_version>
      Test getting API version.
    <Function test_check_api_compatibility_exact>
      Test API compatibility with exact version.
    <Function test_check_api_compatibility_minor>
      Test API compatibility with minor version differences.
    <Function test_deprecated_decorator>
      Test deprecation decorator.
    <Function test_api_version_check_decorator>
      Test API version check decorator.
  <Class TestAPIPipeline>
    Test API v1 PodcastKnowledgePipeline.
    <Function test_pipeline_initialization>
      Test pipeline initialization with API version.
    <Function test_seed_podcast_v1_response>
      Test seed_podcast ensures v1 response schema.
    <Function test_seed_podcasts_v1_response>
      Test seed_podcasts ensures v1 response schema.
    <Function test_deprecated_method>
      Test deprecated method shows warning.
  <Class TestAPIFunctions>
    Test module-level API functions.
    <Function test_seed_podcast_function>
      Test module-level seed_podcast function.
    <Function test_seed_podcasts_function>
      Test module-level seed_podcasts function.
    <Function test_function_with_custom_config>
      Test API function with custom config.
    <Function test_function_cleanup_on_error>
      Test cleanup is called even on error.
    <Function test_forward_compatibility_kwargs>
      Test that functions accept **kwargs for forward compatibility.
<Package e2e>
  End-to-end tests for podcast knowledge graph pipeline.
  <Module test_e2e_scenarios.py>
    End-to-end test scenarios for the podcast knowledge graph pipeline.
    
    These tests validate complete user workflows from start to finish.
    <Class TestE2EScenarios>
      End-to-end test scenarios.
      <Function test_scenario_new_user_first_podcast>
        Scenario: New user processes their first podcast.
        
        Steps:
        1. User provides RSS feed URL
        2. System processes 5 episodes
        3. User can query the knowledge graph
      <Function test_scenario_batch_import_multiple_podcasts>
        Scenario: User imports multiple podcasts at once.
        
        Steps:
        1. User provides list of podcast feeds
        2. System processes them concurrently
        3. All podcasts are in the graph with relationships
      <Function test_scenario_interrupted_processing_recovery>
        Scenario: Processing is interrupted and user resumes.
        
        Steps:
        1. Start processing a podcast
        2. Interrupt after 2 episodes
        3. Resume processing
        4. Verify no duplicate data
      <Function test_scenario_error_handling_partial_success>
        Scenario: Some episodes fail but others succeed.
        
        Steps:
        1. Process podcast with some problematic episodes
        2. Verify partial success
        3. Check error reporting
        4. Verify good episodes are in graph
      <Function test_scenario_large_podcast_memory_efficiency>
        Scenario: Process large podcast without memory issues.
        
        Steps:
        1. Process podcast with many episodes
        2. Monitor memory usage
        3. Verify no memory leaks
        4. Check all data is accessible
      <Function test_scenario_concurrent_users>
        Scenario: Multiple users processing podcasts simultaneously.
        
        Steps:
        1. Simulate multiple concurrent users
        2. Each processes different podcasts
        3. Verify no data corruption
        4. Check all podcasts are separate
      <Function test_scenario_api_migration>
        Scenario: User migrates from old API to new versioned API.
        
        Steps:
        1. Use the versioned API
        2. Check version compatibility
        3. Process podcast with v1 guarantees
        4. Verify response schema
      <Function test_scenario_real_world_podcast>
        Scenario: Process a real podcast end-to-end.
        
        This test actually downloads and processes a real podcast episode.
        Mark as slow since it requires network access.
  <Module test_vtt_pipeline_e2e.py>
    E2E tests for VTT → Knowledge Graph pipeline.
    <Class TestVTTPipelineE2E>
      End-to-end tests for the complete VTT processing pipeline.
      <Function test_vtt_file_processing>
        Test: VTT file → parsed → extracted → stored in Neo4j.
      <Function test_knowledge_extraction>
        Test: Entities and relationships created correctly.
      <Function test_multiple_episodes>
        Test: Multiple VTT files processed in sequence.
<Module tests/integration/test_golden_outputs.py>
  Golden output comparison tests for integration testing.
  
  Compares actual outputs against known good outputs to detect regressions.
  <Class TestGoldenOutputs>
    Test against golden (expected) outputs.
    <Function test_simple_podcast_golden_output>
      Test simple podcast processing against golden output.
    <Function test_complex_podcast_golden_output>
      Test complex podcast with multiple episodes against golden output.
    <Function test_error_handling_golden_output>
      Test error handling matches expected behavior.
  <Class TestPerformanceRegression>
    Test for performance regressions.
    <Function test_processing_speed_regression>
      Test that processing speed hasn't regressed.
    <Function test_memory_usage_regression>
      Test that memory usage hasn't regressed.
  <Class TestEndToEndScenarios>
    End-to-end test scenarios.
    <Function test_full_podcast_processing_flow>
      Test complete flow from RSS to knowledge graph.
    <Function test_concurrent_podcast_processing>
      Test processing multiple podcasts concurrently.
    <Function test_checkpoint_recovery_e2e>
      Test checkpoint recovery in end-to-end scenario.
<Package performance>
  Performance tests for podcast knowledge graph pipeline.
  <Module test_benchmarks.py>
    Performance Benchmark Tests
    
    Performance regression detection for VTT → Knowledge Graph pipeline.
    Part of Phase 7: Basic Performance Validation
    
    This test suite:
    - Compares current performance against baseline
    - Sets acceptable thresholds (+20% from baseline)
    - Initially non-blocking to allow performance tuning
    <Class TestPerformanceBenchmarks>
      Performance benchmark tests for VTT processing pipeline.
      <Function test_vtt_parsing_performance>
        Test VTT parsing performance against baseline.
      <Function test_knowledge_extraction_performance>
        Test knowledge extraction performance against baseline.
      <Function test_neo4j_writes_performance>
        Test Neo4j write performance against baseline.
      <Function test_total_pipeline_performance>
        Test total pipeline performance against baseline.
      <Function test_baseline_data_validity>
        Test that baseline data is valid and complete.
      <Function test_performance_test_file_validity>
        Test that the performance test file is appropriate.
    <Function test_performance_benchmark_integration>
      Test that performance benchmarks can be run in CI.
  <Module test_performance_regression.py>
    Performance regression test suite.
    
    Monitors key performance metrics to catch regressions early.
    <Class TestPerformanceRegression>
      Test suite for performance regression detection.
      <Function test_single_episode_performance>
        Test performance for processing a single episode.
      <Function test_batch_processing_performance>
        Test performance for batch processing multiple episodes.
      <Function test_memory_leak_detection>
        Test for memory leaks during repeated operations.
      <Function test_concurrent_performance>
        Test performance under concurrent load.
      <Function test_scaling_performance>
        Test how performance scales with input size.
<Module tests/processing/test_episode_flow.py>
  Tests for episode flow analysis functionality.
  <Class TestEpisodeFlowAnalyzer>
    Test suite for EpisodeFlowAnalyzer class.
    <Function test_classify_segment_transitions>
      Test segment transition classification.
    <Function test_track_concept_introductions>
      Test concept introduction tracking.
    <Function test_map_concept_development>
      Test concept development mapping.
    <Function test_analyze_conversation_momentum>
      Test conversation momentum analysis.
    <Function test_track_topic_depth>
      Test topic depth tracking.
    <Function test_detect_circular_references>
      Test circular reference detection.
    <Function test_analyze_concept_resolution>
      Test concept resolution analysis.
    <Function test_generate_episode_flow_summary>
      Test episode flow summary generation.
    <Function test_analyze_speaker_contribution_flow>
      Test speaker contribution analysis.
    <Function test_calculate_segment_flow_importance>
      Test segment flow importance calculation.
    <Function test_empty_inputs>
      Test handling of empty inputs.
    <Function test_single_segment>
      Test handling of single segment.
    <Function test_no_embedding_provider>
      Test analyzer without embedding provider.
<Module tests/processing/test_metrics.py>
  Tests for metrics calculation functionality
  <Class TestMetricsCalculator>
    Test suite for MetricsCalculator class
    <Function test_calculate_complexity_simple_text>
      Test complexity calculation with simple text
    <Function test_calculate_complexity_complex_text>
      Test complexity calculation with complex text
    <Function test_calculate_complexity_empty_text>
      Test complexity calculation with empty text
    <Function test_calculate_information_density>
      Test information density calculation
    <Function test_calculate_information_density_empty_lists>
      Test information density with empty lists
    <Function test_calculate_information_density_empty_text>
      Test information density with empty text
    <Function test_calculate_accessibility>
      Test accessibility calculation
    <Function test_calculate_accessibility_empty_text>
      Test accessibility with empty text
    <Function test_aggregate_episode_metrics>
      Test episode-level metrics aggregation
    <Function test_technical_term_detection>
      Test technical term detection in complexity calculation
    <Function test_readability_score_calculation>
      Test readability score calculation via accessibility metrics
    <Function test_entity_complexity_scoring>
      Test entity complexity scoring
    <Function test_vocabulary_richness_edge_cases>
      Test vocabulary richness (unique ratio) calculation edge cases
    <Function test_metrics_with_special_characters>
      Test metrics calculation with special characters
    <Function test_fact_detection>
      Test fact detection in information density
    <Function test_explanation_quality_detection>
      Test explanation quality in accessibility
<Module tests/scripts/test_integration.py>
  Quick integration test to verify all components work together.
  <Function test_imports>
    Test that all components can be imported.
  <Function test_basic_instantiation>
    Test basic instantiation of key components.
<Module tests/scripts/test_minimal_integration.py>
  Minimal integration test focusing on core schemaless components only.
  <Function test_core_classes>
    Test that core classes exist and can be imported directly.
  <Function test_config_files>
    Test that configuration files exist.
  <Function test_test_files>
    Test that test files exist.
<Module tests/seeding/test_batch_processor.py>
  Tests for batch processing utilities.
  <Class TestBatchItem>
    Tests for BatchItem dataclass.
    <Function test_batch_item_creation>
      Test creating batch item.
    <Function test_batch_item_with_metadata>
      Test batch item with metadata.
  <Class TestBatchResult>
    Tests for BatchResult dataclass.
    <Function test_successful_result>
      Test successful batch result.
    <Function test_failed_result>
      Test failed batch result.
  <Class TestBatchProcessor>
    Tests for BatchProcessor class.
    <Function test_initialization>
      Test processor initialization.
    <Function test_process_empty_items>
      Test processing empty item list.
    <Function test_process_individual_items>
      Test processing items individually.
    <Function test_process_with_priorities>
      Test processing respects priorities.
    <Function test_process_with_errors>
      Test handling of processing errors.
    <Function test_batch_creation>
      Test batch creation with optimization.
    <Function test_progress_callback>
      Test progress callback functionality.
    <Function test_memory_limit>
      Test memory limit enforcement.
    <Function test_batch_function_processing>
      Test processing with batch function.
    <Function test_statistics>
      Test statistics collection.
  <Class TestPriorityBatchProcessor>
    Tests for PriorityBatchProcessor.
    <Function test_start_stop>
      Test starting and stopping processor.
    <Function test_add_items>
      Test adding items to priority queue.
  <Class TestHelperFunctions>
    Tests for helper functions.
    <Function test_create_batch_items_default>
      Test creating batch items with defaults.
    <Function test_create_batch_items_custom>
      Test creating batch items with custom functions.
    <Function test_batch_with_timeout>
      Test batch processing with timeout.
  <Class TestBatchOptimization>
    Tests for batch size optimization.
    <Function test_batch_performance_recording>
      Test recording of batch performance.
    <Function test_batch_size_optimization>
      Test batch size optimization based on performance.
<Module tests/seeding/test_checkpoint.py>
  Tests for enhanced checkpoint management.
  <Class TestProgressCheckpoint>
    Tests for enhanced ProgressCheckpoint.
    <Function test_initialization>
      Test checkpoint manager initialization.
    <Function test_save_and_load_episode_checkpoint>
      Test saving and loading episode-level checkpoint.
    <Function test_save_and_load_segment_checkpoint>
      Test saving and loading segment-level checkpoint.
    <Function test_compression>
      Test checkpoint compression.
    <Function test_no_compression>
      Test checkpoint without compression.
    <Function test_metadata_saving>
      Test metadata is saved correctly.
    <Function test_version_migration>
      Test checkpoint version migration.
    <Function test_get_episode_checkpoints>
      Test getting all checkpoints for an episode.
    <Function test_get_incomplete_episodes>
      Test finding incomplete episodes.
    <Function test_clean_old_checkpoints>
      Test cleaning old checkpoints.
    <Function test_checkpoint_statistics>
      Test getting checkpoint statistics.
    <Function test_export_checkpoints>
      Test exporting checkpoints.
    <Function test_export_specific_episodes>
      Test exporting specific episodes only.
    <Function test_import_checkpoints>
      Test importing checkpoints from archive.
    <Function test_distributed_locking>
      Test distributed checkpoint support with locking.
  <Class TestCheckpointMetadata>
    Tests for CheckpointMetadata.
    <Function test_metadata_creation>
      Test creating checkpoint metadata.
    <Function test_metadata_to_dict>
      Test converting metadata to dictionary.
<Module tests/seeding/test_pipeline_executor_refactored.py>
  Unit tests for refactored PipelineExecutor helper methods.
  
  This module tests the new helper methods added during refactoring
  to ensure they maintain the same behavior as the original code.
  <Class TestPipelineExecutorHelperMethods>
    Test the newly extracted helper methods.
    <Function test_is_episode_completed_true>
      Test _is_episode_completed when episode is completed.
    <Function test_is_episode_completed_false>
      Test _is_episode_completed when episode is not completed.
    <Function test_download_episode_audio_success>
      Test _download_episode_audio successful download.
    <Function test_download_episode_audio_failure>
      Test _download_episode_audio when download fails.
    <Function test_add_episode_context>
      Test _add_episode_context adds correct attributes.
    <Function test_process_audio_segments>
      Test _process_audio_segments processing and checkpointing.
    <Function test_determine_extraction_mode_fixed>
      Test _determine_extraction_mode returns 'fixed' by default.
    <Function test_determine_extraction_mode_schemaless>
      Test _determine_extraction_mode returns 'schemaless' when enabled.
    <Function test_determine_extraction_mode_migration>
      Test _determine_extraction_mode returns 'migration' when enabled.
    <Function test_finalize_episode_processing>
      Test _finalize_episode_processing completes all steps.
    <Function test_cleanup_audio_file_enabled>
      Test _cleanup_audio_file when cleanup is enabled.
    <Function test_cleanup_audio_file_disabled>
      Test _cleanup_audio_file when cleanup is disabled.
    <Function test_cleanup_audio_file_error_ignored>
      Test _cleanup_audio_file ignores errors.
<Package services>
  Service tests package.
  <Module test_embeddings_service.py>
    Tests for embeddings service implementation.
    <Class TestEmbeddingsService>
      Test suite for EmbeddingsService.
      <Function test_initialization>
        Test service initialization.
      <Function test_initialization_default_model>
        Test initialization with default model.
      <Function test_embed_single_text>
        Test embedding single text.
      <Function test_embed_batch>
        Test batch embedding.
      <Function test_calculate_similarity>
        Test similarity calculation.
      <Function test_empty_text_handling>
        Test handling of empty text.
      <Function test_error_handling>
        Test error handling.
  <Module test_graph_storage_service.py>
    Tests for graph storage service implementation.
    <Class TestGraphStorageService>
      Test suite for GraphStorageService.
      <Function test_initialization>
        Test service initialization.
      <Function test_store_entity>
        Test storing an entity.
      <Function test_store_relationship>
        Test storing a relationship.
      <Function test_batch_store_entities>
        Test batch storing entities.
      <Function test_find_entity_by_name>
        Test finding entity by name.
      <Function test_close_connection>
        Test closing database connection.
      <Function test_connection_error_handling>
        Test handling of connection errors.
      <Function test_transaction_rollback>
        Test transaction rollback on error.
  <Module test_llm_service.py>
    Tests for LLM service implementation.
    <Class TestLLMService>
      Test suite for LLMService.
      <Function test_initialization>
        Test service initialization.
      <Function test_initialization_no_api_key>
        Test initialization without API key.
      <Function test_generate_content>
        Test content generation.
      <Function test_extract_entities>
        Test entity extraction.
      <Function test_error_handling>
        Test error handling.
<Module tests/unit/test_config.py>
  Comprehensive tests for src/core/config.py - targeting 95% coverage.
  
  This test suite covers:
  - Configuration initialization with defaults
  - Environment variable loading and overrides
  - YAML/JSON file loading
  - Configuration validation
  - Error handling for all edge cases
  - Path handling and conversions
  - Sensitive data masking
  - Inheritance and specialized configs
  <Class TestPipelineConfig>
    Test suite for PipelineConfig class.
    <Function test_default_initialization>
      Test config initializes with all default values.
    <Function test_environment_variable_loading>
      Test that environment variables are properly loaded.
    <Function test_path_handling>
      Test path conversion and resolution.
    <Function test_validation_success>
      Test successful validation with valid configuration.
    <Function test_validation_missing_password>
      Test validation fails when NEO4J_PASSWORD is missing.
    <Function test_validation_missing_api_keys>
      Test validation fails when both API keys are missing.
    <Function test_validation_invalid_segment_tokens>
      Test validation fails with invalid segment token configuration.
    <Function test_validation_invalid_speakers>
      Test validation fails with invalid speaker configuration.
    <Function test_validation_invalid_gpu_memory>
      Test validation fails with invalid GPU memory fraction.
    <Function test_validation_invalid_schemaless_settings>
      Test validation fails with invalid schemaless settings.
    <Function test_validation_directory_creation_failure>
      Test validation fails when directories cannot be created.
    <Function test_validation_multiple_errors>
      Test validation collects and reports multiple errors.
    <Function test_to_dict>
      Test configuration serialization to dictionary.
    <Function test_to_dict_with_none_secrets>
      Test to_dict when secrets are None.
    <Function test_from_file_yaml>
      Test loading configuration from YAML file.
    <Function test_from_file_json>
      Test loading configuration from JSON file.
    <Function test_from_file_not_found>
      Test error when config file doesn't exist.
    <Function test_from_file_unsupported_format>
      Test error with unsupported file format.
    <Function test_from_file_yaml_not_available>
      Test error when YAML file is loaded but PyYAML not installed.
    <Function test_from_file_invalid_json>
      Test error with invalid JSON content.
    <Function test_post_init_called>
      Test that __post_init__ is called during initialization.
    <Function test_environment_override_in_from_file>
      Test that environment variables override file values.
    <Function test_boolean_environment_parsing>
      Test parsing of boolean values from environment variables.
    <Function test_numeric_environment_parsing>
      Test parsing of numeric values from environment variables.
    <Function test_immutability>
      Test that config values can be modified (dataclasses are not frozen).
  <Class TestSeedingConfig>
    Test suite for SeedingConfig class.
    <Function test_inheritance>
      Test that SeedingConfig inherits from PipelineConfig.
    <Function test_seeding_specific_defaults>
      Test SeedingConfig has correct default values.
    <Function test_seeding_config_validation>
      Test that SeedingConfig still validates properly.
    <Function test_seeding_config_to_dict>
      Test SeedingConfig serialization includes all fields.
    <Function test_seeding_config_from_file>
      Test loading SeedingConfig from file.
  <Class TestEdgeCases>
    Test edge cases and error conditions.
    <Function test_empty_environment>
      Test behavior with completely empty environment.
    <Function test_partial_environment>
      Test with some but not all environment variables.
    <Function test_invalid_numeric_environment>
      Test handling of invalid numeric values in environment.
    <Function test_whitespace_in_environment>
      Test handling of whitespace in environment values.
    <Function test_special_characters_in_paths>
      Test handling of special characters in path names.
    <Function test_unicode_in_configuration>
      Test handling of unicode characters.
    <Function test_extremely_large_values>
      Test handling of extremely large configuration values.
    <Function test_directory_creation_race_condition>
      Test handling when directory is created between checks.
    <Function test_config_copy_and_modification>
      Test creating modified copies of configuration.
    <Function test_yaml_with_invalid_values>
      Test YAML loading with invalid value types.
<Module tests/unit/test_core_imports.py>
  Test that core module imports work correctly.
  <Function test_core_interfaces_import>
    Test that interfaces can be imported.
  <Function test_core_exceptions_import>
    Test that exceptions can be imported.
  <Function test_core_models_import>
    Test that models can be imported.
  <Function test_core_config_import>
    Test that configuration can be imported.
  <Function test_core_constants_import>
    Test that constants can be imported.
  <Function test_model_validation>
    Test model validation functions.
  <Function test_exception_severity>
    Test exception severity levels.
<Module tests/unit/test_debugging_utils.py>
  Tests for debugging utilities - matches actual API.
  <Class TestErrorEnums>
    Test error severity and category enums.
    <Function test_error_severity_values>
      Test ErrorSeverity enum values.
    <Function test_error_category_values>
      Test ErrorCategory enum values.
  <Class TestErrorContext>
    Test ErrorContext dataclass.
    <Function test_error_context_creation>
      Test creating ErrorContext instances.
    <Function test_error_context_to_dict>
      Test converting ErrorContext to dictionary.
    <Function test_error_context_to_json>
      Test converting ErrorContext to JSON.
  <Class TestDebugLogger>
    Test DebugLogger class.
    <Function test_debug_logger_initialization>
      Test DebugLogger initialization.
    <Function test_log_error_context>
      Test logging error context.
    <Function test_get_error_summary>
      Test getting error summary.
  <Class TestWithErrorContext>
    Test with_error_context decorator.
    <Function test_successful_function>
      Test decorator with successful function.
    <Function test_function_with_error>
      Test decorator with failing function.
    <Function test_function_with_custom_logger>
      Test decorator with custom logger.
  <Class TestDebugContext>
    Test debug_context context manager.
    <Function test_successful_context>
      Test context manager with successful block.
    <Function test_context_with_error>
      Test context manager with error.
    <Function test_context_with_metadata>
      Test context manager with metadata.
  <Class TestErrorAnalyzer>
    Test ErrorAnalyzer class.
    <Function test_analyze_validation_error>
      Test analyzing validation error.
    <Function test_analyze_network_error>
      Test analyzing network error.
    <Function test_analyze_unknown_error>
      Test analyzing unknown error.
  <Class TestCreateProviderErrorHandler>
    Test create_provider_error_handler function.
    <Function test_create_handler>
      Test creating provider error handler.
    <Function test_handler_with_retryable_error>
      Test handler with retryable error.
  <Class TestErrorRecoveryStrategy>
    Test ErrorRecoveryStrategy class.
    <Function test_attempt_recovery_network>
      Test recovery attempt for network error.
    <Function test_attempt_recovery_parsing>
      Test recovery attempt for parsing error.
    <Function test_max_retries_exceeded>
      Test recovery when max retries exceeded.
<Module tests/unit/test_exceptions.py>
  Comprehensive tests for the exceptions module.
  
  This module tests all custom exceptions, their initialization,
  string representations, and severity levels.
  <Class TestErrorSeverity>
    Test the ErrorSeverity enum.
    <Function test_severity_values>
      Test that severity levels have expected values.
    <Function test_all_severities_defined>
      Test that all expected severities are defined.
  <Class TestPodcastProcessingError>
    Test the base PodcastProcessingError class.
    <Function test_basic_initialization>
      Test basic exception initialization.
    <Function test_initialization_with_severity>
      Test initialization with custom severity.
    <Function test_initialization_with_details>
      Test initialization with details.
    <Function test_string_representation_basic>
      Test basic string representation.
    <Function test_string_representation_with_severity>
      Test string representation with different severities.
    <Function test_string_representation_with_details>
      Test string representation including details.
    <Function test_inheritance_from_exception>
      Test that it properly inherits from Exception.
  <Class TestDatabaseConnectionError>
    Test DatabaseConnectionError class.
    <Function test_always_critical>
      Test that database errors are always critical.
    <Function test_with_details>
      Test database error with connection details.
    <Function test_alias_compatibility>
      Test that ConnectionError alias works.
  <Class TestAudioProcessingError>
    Test AudioProcessingError class.
    <Function test_default_severity>
      Test default severity is WARNING.
    <Function test_custom_severity>
      Test can override severity.
    <Function test_with_audio_details>
      Test with audio-specific details.
  <Class TestLLMProcessingError>
    Test LLMProcessingError class.
    <Function test_default_warning_severity>
      Test default severity for LLM errors.
    <Function test_with_model_details>
      Test with model-specific details.
  <Class TestConfigurationError>
    Test ConfigurationError class.
    <Function test_always_critical>
      Test configuration errors are critical.
    <Function test_with_config_details>
      Test with configuration details.
  <Class TestPipelineError>
    Test PipelineError class.
    <Function test_default_critical_severity>
      Test pipeline errors default to critical.
    <Function test_can_override_severity>
      Test can set non-critical pipeline error.
  <Class TestValidationError>
    Test ValidationError class.
    <Function test_basic_validation_error>
      Test basic validation error.
    <Function test_with_field_and_value>
      Test validation error with field info.
    <Function test_with_existing_details>
      Test that field/value merge with existing details.
  <Class TestProviderError>
    Test ProviderError class.
    <Function test_provider_name_required>
      Test provider name is included.
    <Function test_provider_error_string>
      Test string representation includes provider.
    <Function test_with_additional_details>
      Test merging provider name with other details.
  <Class TestCriticalError>
    Test CriticalError class.
    <Function test_always_critical>
      Test critical errors are always CRITICAL severity.
  <Class TestExtractionError>
    Test ExtractionError class.
    <Function test_default_warning>
      Test extraction errors default to warning.
    <Function test_can_be_critical>
      Test can create critical extraction error.
  <Class TestRateLimitError>
    Test RateLimitError class.
    <Function test_basic_rate_limit>
      Test basic rate limit error.
    <Function test_with_retry_after>
      Test rate limit with retry information.
    <Function test_with_additional_details>
      Test with both retry_after and other details.
  <Class TestTimeoutError>
    Test TimeoutError class.
    <Function test_basic_timeout>
      Test basic timeout error.
    <Function test_with_operation_details>
      Test timeout with operation information.
    <Function test_with_all_details>
      Test with operation, timeout, and extra details.
  <Class TestResourceError>
    Test ResourceError class.
    <Function test_default_critical>
      Test resource errors are critical by default.
    <Function test_with_resource_type>
      Test with specific resource type.
    <Function test_memory_resource_error>
      Test memory-specific resource error.
  <Class TestDataIntegrityError>
    Test DataIntegrityError class.
    <Function test_default_critical>
      Test data integrity errors are critical.
    <Function test_with_entity_info>
      Test with entity type and ID.
    <Function test_with_full_details>
      Test with all parameters.
  <Class TestParsingError>
    Test ParsingError class.
    <Function test_default_warning>
      Test parsing errors default to warning.
    <Function test_with_parse_details>
      Test with parsing context.
  <Class TestCheckpointError>
    Test CheckpointError class.
    <Function test_default_warning>
      Test checkpoint errors are warnings by default.
    <Function test_critical_checkpoint_error>
      Test can create critical checkpoint error.
  <Class TestBatchProcessingError>
    Test BatchProcessingError class.
    <Function test_default_warning>
      Test batch errors default to warning.
    <Function test_with_batch_details>
      Test with batch processing details.
  <Class TestAliases>
    Test backward compatibility aliases.
    <Function test_podcast_kg_error_alias>
      Test PodcastKGError is alias for PodcastProcessingError.
    <Function test_connection_error_alias>
      Test ConnectionError is alias for DatabaseConnectionError.
  <Class TestExceptionHierarchy>
    Test the exception hierarchy and inheritance.
    <Function test_all_inherit_from_base>
      Test all custom exceptions inherit from PodcastProcessingError.
    <Function test_provider_error_hierarchy>
      Test RateLimitError inherits from ProviderError.
  <Class TestExceptionUsagePatterns>
    Test common usage patterns for exceptions.
    <Function test_catching_specific_exceptions>
      Test catching specific exception types.
    <Function test_catching_by_base_class>
      Test catching exceptions by base class.
    <Function test_exception_context_preservation>
      Test that exception context is preserved.
<Module tests/unit/test_feature_flags.py>
  Comprehensive tests for the feature flags module.
  
  This module tests the actual feature flag system implementation including
  flag management, caching, decorators, and configuration.
  <Class TestFeatureFlag>
    Test the FeatureFlag enum.
    <Function test_feature_flags_defined>
      Test that expected feature flags are defined.
    <Function test_flag_values_are_strings>
      Test that all flag values are strings.
    <Function test_flag_enum_members>
      Test specific enum members exist.
  <Class TestFlagConfig>
    Test the FlagConfig dataclass.
    <Function test_flag_config_creation>
      Test creating a flag configuration.
    <Function test_flag_config_with_env_var>
      Test flag config with custom env var.
    <Function test_flag_config_default_env_var>
      Test default environment variable naming.
  <Class TestFeatureFlagManager>
    Test the FeatureFlagManager class.
    <Function test_manager_initialization>
      Test manager initializes with all flags.
    <Function test_is_enabled_default_values>
      Test default values for flags.
    <Function test_set_flag>
      Test setting flag values programmatically.
    <Function test_set_unknown_flag_raises_error>
      Test setting unknown flag raises ValueError.
    <Function test_environment_variable_override>
      Test environment variables override defaults.
    <Function test_environment_variable_disable>
      Test environment variables can disable default-true flags.
    <Function test_environment_variable_formats>
      Test various truthy environment variable formats.
    <Function test_caching_behavior>
      Test that flag values are cached.
    <Function test_get_all_flags>
      Test retrieving all flag configurations.
    <Function test_programmatic_override_beats_environment>
      Test programmatic settings override environment variables.
  <Class TestModuleLevelFunctions>
    Test module-level convenience functions.
    <Function test_get_feature_flag_manager_singleton>
      Test that get_feature_flag_manager returns singleton.
    <Function test_is_enabled_function>
      Test the module-level is_enabled function.
    <Function test_set_flag_function>
      Test the module-level set_flag function.
    <Function test_get_all_flags_function>
      Test the module-level get_all_flags function.
  <Class TestRequiresFlagDecorator>
    Test the requires_flag decorator.
    <Function test_decorator_allows_when_enabled>
      Test decorator allows function execution when flag is enabled.
    <Function test_decorator_blocks_when_disabled>
      Test decorator prevents execution when flag is disabled.
    <Function test_decorator_with_method>
      Test decorator works with class methods.
    <Function test_decorator_preserves_function_name>
      Test decorator preserves function metadata.
    <Function test_decorator_with_arguments>
      Test decorator with various argument types.
    <Function test_decorator_with_exception_in_function>
      Test decorator behavior when decorated function raises exception.
    <Function test_decorator_returns_none_when_disabled>
      Test that decorator returns None when flag is disabled.
  <Class TestFeatureFlagIntegration>
    Test integration scenarios with feature flags.
    <Function test_multiple_flags_scenario>
      Test managing multiple flags together.
    <Function test_component_enhancement_flags>
      Test component enhancement flags are properly configured.
    <Function test_emergency_disable_scenario>
      Test emergency disable of features.
    <Function test_environment_based_configuration>
      Test configuring multiple flags via environment.
    <Function test_flag_usage_logging>
      Test that flag usage is logged appropriately.
<Module tests/unit/test_memory.py>
  Tests for simplified memory management utilities.
  <Class TestMemoryUtils>
    Test simple memory management utilities.
    <Function test_cleanup_memory>
      Test that cleanup_memory calls garbage collection.
    <Function test_get_memory_usage_with_psutil>
      Test memory usage reporting with psutil available.
    <Function test_get_memory_usage_without_psutil>
      Test memory usage when psutil is not available.
    <Function test_get_memory_usage_with_error>
      Test memory usage when psutil raises an error.
<Module tests/unit/test_models.py>
  Comprehensive tests for src/core/models.py - targeting 100% coverage.
  
  This test suite covers:
  - All enum types and their values
  - All dataclass models and their methods
  - Serialization/deserialization (to_dict methods)
  - Default values and factory functions
  - Edge cases and validation
  - Type conversions
  <Class TestEnums>
    Test all enum types.
    <Function test_complexity_level_values>
      Test ComplexityLevel enum has all expected values.
    <Function test_insight_type_values>
      Test InsightType enum has all expected values.
    <Function test_quote_type_values>
      Test QuoteType enum has all expected values.
    <Function test_entity_type_values>
      Test EntityType enum has all expected values.
    <Function test_speaker_role_values>
      Test SpeakerRole enum has all expected values.
    <Function test_enum_inheritance>
      Test that enums inherit from str and Enum.
  <Class TestPodcast>
    Test Podcast model.
    <Function test_podcast_creation_minimal>
      Test creating podcast with minimal required fields.
    <Function test_podcast_creation_full>
      Test creating podcast with all fields.
    <Function test_podcast_to_dict>
      Test podcast serialization to dictionary.
    <Function test_podcast_to_dict_with_none_values>
      Test to_dict with None values.
  <Class TestEpisode>
    Test Episode model.
    <Function test_episode_creation_minimal>
      Test creating episode with minimal fields.
    <Function test_episode_creation_full>
      Test creating episode with all fields.
    <Function test_episode_to_dict>
      Test episode serialization to dictionary.
  <Class TestSegment>
    Test Segment model.
    <Function test_segment_creation_minimal>
      Test creating segment with minimal fields.
    <Function test_segment_creation_full>
      Test creating segment with all fields.
    <Function test_segment_to_dict>
      Test segment serialization to dictionary.
    <Function test_segment_to_dict_with_optional_fields>
      Test segment to_dict includes optional fields when present.
  <Class TestSpeaker>
    Test Speaker model.
    <Function test_speaker_creation>
      Test creating speaker.
    <Function test_speaker_with_guest_role>
      Test speaker with guest role.
    <Function test_speaker_to_dict>
      Test speaker serialization.
    <Function test_speaker_to_dict_with_none_bio>
      Test speaker to_dict with None bio.
  <Class TestEntity>
    Test Entity model.
    <Function test_entity_creation_minimal>
      Test creating entity with minimal fields.
    <Function test_entity_creation_full>
      Test creating entity with all fields.
    <Function test_entity_default_importance>
      Test that importance defaults work correctly.
    <Function test_entity_to_dict>
      Test entity serialization.
  <Class TestQuote>
    Test Quote model.
    <Function test_quote_creation_minimal>
      Test creating quote with required fields.
    <Function test_quote_creation_full>
      Test creating quote with all fields.
    <Function test_quote_to_dict>
      Test quote serialization.
  <Class TestInsight>
    Test Insight model.
    <Function test_insight_creation_minimal>
      Test creating insight with required fields.
    <Function test_insight_creation_full>
      Test creating insight with all fields.
    <Function test_insight_to_dict>
      Test insight serialization.
  <Class TestTopic>
    Test Topic model.
    <Function test_topic_creation>
      Test creating topic.
    <Function test_topic_minimal>
      Test topic with minimal fields.
    <Function test_topic_to_dict>
      Test topic serialization.
  <Class TestPotentialConnection>
    Test PotentialConnection model.
    <Function test_potential_connection_creation>
      Test creating potential connection.
    <Function test_potential_connection_minimal>
      Test potential connection with minimal fields.
  <Class TestProcessingResult>
    Test ProcessingResult model.
    <Function test_processing_result_creation>
      Test creating processing result.
    <Function test_processing_result_failed>
      Test failed processing result.
  <Class TestEdgeCases>
    Test edge cases and special scenarios.
    <Function test_empty_lists_remain_independent>
      Test that default empty lists are independent instances.
    <Function test_enum_string_comparison>
      Test that enum values can be compared with strings.
    <Function test_dataclass_equality>
      Test dataclass equality comparison.
    <Function test_to_dict_methods_json_serializable>
      Test that to_dict outputs are JSON serializable.
    <Function test_optional_field_handling>
      Test that optional fields handle None properly.
    <Function test_float_timestamp_handling>
      Test that float timestamps work correctly.
    <Function test_large_embedding_vectors>
      Test handling of large embedding vectors.
<Module tests/utils/test_component_tracker.py>
  Unit tests for component tracking system.
  <Class TestComponentTracker>
    Test cases for ComponentTracker class.
    <Function test_tracker_initialization>
      Test tracker initializes correctly.
    <Function test_record_impact>
      Test recording component impact.
    <Function test_track_impact_context>
      Test the track_impact context manager.
    <Function test_generate_impact_report>
      Test generating impact report.
    <Function test_compare_with_baseline>
      Test baseline comparison functionality.
    <Function test_identify_redundant_components>
      Test identifying redundant components.
    <Function test_tracking_decorator>
      Test the tracking decorator functionality.
    <Function test_module_functions>
      Test module-level convenience functions.
<Module tests/utils/test_debugging.py>
  Tests for debugging and error handling utilities.
  <Class TestErrorContext>
    Tests for ErrorContext class.
    <Function test_error_context_creation>
      Test creating error context.
    <Function test_error_context_to_dict>
      Test converting error context to dictionary.
    <Function test_error_context_to_json>
      Test converting error context to JSON.
  <Class TestDebugLogger>
    Tests for DebugLogger class.
    <Function test_debug_logger_creation>
      Test creating debug logger.
    <Function test_log_error_context>
      Test logging error context.
    <Function test_log_error_context_severity_levels>
      Test logging different severity levels.
    <Function test_get_error_summary>
      Test getting error summary.
    <Function test_debug_logger_with_file>
      Test debug logger with file output.
  <Class TestErrorContextDecorator>
    Tests for with_error_context decorator.
    <Function test_successful_function_call>
      Test decorator with successful function call.
    <Function test_function_with_error>
      Test decorator with function that raises error.
  <Class TestDebugContext>
    Tests for debug_context context manager.
    <Function test_successful_operation>
      Test debug context with successful operation.
    <Function test_failed_operation>
      Test debug context with failed operation.
  <Class TestErrorAnalyzer>
    Tests for ErrorAnalyzer class.
    <Function test_analyze_rate_limit_error>
      Test analyzing rate limit error.
    <Function test_analyze_database_error>
      Test analyzing database connection error.
    <Function test_analyze_memory_error>
      Test analyzing memory error.
    <Function test_analyze_unknown_error>
      Test analyzing unknown error.
  <Class TestProviderErrorHandler>
    Tests for provider-specific error handlers.
    <Function test_openai_rate_limit_handler>
      Test OpenAI rate limit error handling.
    <Function test_openai_context_length_handler>
      Test OpenAI context length error handling.
    <Function test_gemini_quota_handler>
      Test Gemini quota error handling.
    <Function test_unknown_provider_error>
      Test handling unknown provider error.
  <Class TestErrorRecoveryStrategy>
    Tests for ErrorRecoveryStrategy class.
    <Function test_network_timeout_recovery>
      Test recovery from network timeout.
    <Function test_memory_error_recovery>
      Test recovery from memory error.
    <Function test_no_recovery_strategy>
      Test when no recovery strategy exists.
<Module tests/utils/test_patterns_performance.py>
  Performance tests for pattern matching utilities.
  <Class TestPatternMatchingPerformance>
    Performance tests for pattern matching.
    <Function test_pattern_compilation_caching>
      Test that pattern compilation is cached effectively.
    <Function test_match_result_caching>
      Test that match results are cached.
    <Function test_large_text_processing>
      Test performance on large texts.
    <Function test_concurrent_pattern_matching>
      Test pattern matching with multiple patterns simultaneously.
    <Function test_pattern_library_performance>
      Test PatternLibrary access performance.
    <Function test_scalability[100-0.01]>
      Test that processing time scales linearly with text size.
    <Function test_scalability[1000-0.05]>
      Test that processing time scales linearly with text size.
    <Function test_scalability[10000-0.5]>
      Test that processing time scales linearly with text size.
    <Function test_cache_effectiveness>
      Test cache hit rate and effectiveness.
<Module tests/utils/test_resources.py>
/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/venv/lib/python3.11/site-packages/coverage/report_core.py:110: CoverageWarning: Couldn't parse Python file '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/utils/feature_flag_utils.py' (couldnt-parse)
  coverage._warn(msg, slug="couldnt-parse")
  Tests for resource management utilities.
  <Class TestTempFileManager>
    Tests for TempFileManager class.
    <Function test_create_temp_file>
      Test temporary file creation.
    <Function test_create_temp_dir>
      Test temporary directory creation.
    <Function test_cleanup_all>
      Test cleanup of all temporary resources.
    <Function test_context_manager>
      Test TempFileManager as context manager.
    <Function test_cleanup_nonexistent>
      Test cleanup of non-existent files.
  <Class TestTempContextManagers>
    Tests for temporary file/dir context managers.
    <Function test_temp_file_context>
      Test temp_file context manager.
    <Function test_temp_file_text_mode>
      Test temp_file with text mode.
    <Function test_temp_dir_context>
      Test temp_dir context manager.
  <Class TestProgressCheckpoint>
    Tests for ProgressCheckpoint class.
    <Function test_save_and_load_checkpoint>
      Test saving and loading checkpoints.
    <Function test_load_nonexistent_checkpoint>
      Test loading non-existent checkpoint.
    <Function test_get_completed_episodes>
      Test getting completed episodes.
    <Function test_clean_episode_checkpoints>
      Test cleaning episode checkpoints.
    <Function test_clean_old_checkpoints>
      Test cleaning old checkpoints.
  <Class TestResourcePool>
    Tests for ResourcePool class.
    <Function test_acquire_and_release>
      Test basic acquire and release.
    <Function test_reset_function>
      Test resource reset on reuse.
    <Function test_context_manager>
      Test resource pool context manager.
    <Function test_max_pool_size>
      Test pool size limiting.
    <Function test_clear_pool>
      Test clearing the pool.
  <Class TestConnectionManager>
    Tests for ConnectionManager class.
    <Function test_get_connection>
      Test getting connection.
    <Function test_close_connection>
      Test closing connection.
    <Function test_custom_close_function>
      Test custom close function.
    <Function test_context_manager>
      Test ConnectionManager as context manager.
    <Function test_close_error_handling>
      Test error handling during close.
  <Class TestFileLock>
    Tests for file_lock context manager.
    <Function test_file_lock_basic>
      Test basic file locking.
    <Function test_file_lock_timeout>
      Test lock timeout.
    <Function test_file_lock_cleanup_on_exception>
      Test lock cleanup on exception.
<Module tests/utils/test_retry.py>
  Comprehensive tests for retry and resilience utilities.
  <Class TestExponentialBackoff>
    Test suite for ExponentialBackoff class.
    <Function test_initialization>
      Test backoff initialization.
    <Function test_exponential_growth>
      Test exponential delay growth.
    <Function test_max_delay_capping>
      Test that delays are capped at max_delay.
    <Function test_reset>
      Test resetting the backoff counter.
    <Function test_different_bases>
      Test backoff with different base values.
  <Class TestCalculateDelay>
    Test suite for _calculate_delay function.
    <Function test_exponential_strategy>
      Test exponential backoff strategy.
    <Function test_linear_strategy>
      Test linear backoff strategy.
    <Function test_constant_strategy>
      Test constant backoff strategy.
    <Function test_fibonacci_strategy>
      Test Fibonacci backoff strategy.
    <Function test_max_delay_cap>
      Test that all strategies respect max_delay.
  <Class TestWithRetryDecorator>
    Test suite for with_retry decorator.
    <Function test_successful_call>
      Test successful function call without retries.
    <Function test_retry_on_exception>
      Test retry on exceptions.
    <Function test_max_retries_exceeded>
      Test that exception is raised after max retries.
    <Function test_specific_exception_types>
      Test retry only on specific exception types.
    <Function test_retryable_error_patterns>
      Test retry based on error message patterns.
    <Function test_backoff_timing>
      Test that backoff delays are applied correctly.
    <Function test_jitter>
      Test that jitter is applied to delays.
    <Function test_different_strategies>
      Test different retry strategies.
    <Function test_logging>
      Test that appropriate logs are generated.
  <Class TestCircuitBreaker>
    Test suite for CircuitBreaker class.
    <Function test_initialization>
      Test circuit breaker initialization.
    <Function test_successful_calls>
      Test that successful calls keep circuit closed.
    <Function test_circuit_opens_on_failures>
      Test that circuit opens after threshold failures.
    <Function test_open_circuit_rejects_calls>
      Test that open circuit rejects calls.
    <Function test_half_open_state>
      Test transition to half-open state.
    <Function test_recovery_from_half_open>
      Test successful recovery from half-open state.
    <Function test_failure_in_half_open_reopens>
      Test that failure in half-open state reopens circuit.
    <Function test_decorator_usage>
      Test circuit breaker as decorator.
    <Function test_specific_exception_type>
      Test monitoring specific exception types.
  <Class TestRateLimiter>
    Test suite for RateLimiter class.
    <Function test_initialization>
      Test rate limiter initialization.
    <Function test_token_consumption>
      Test basic token consumption.
    <Function test_token_regeneration>
      Test that tokens regenerate over time.
    <Function test_burst_limit>
      Test that tokens don't exceed burst limit.
    <Function test_waiting_for_tokens>
      Test waiting when tokens aren't available.
    <Function test_decorator_usage>
      Test rate limiter as decorator.
    <Function test_multiple_token_request>
      Test requesting multiple tokens at once.
  <Class TestRetryWithFallback>
    Test suite for retry_with_fallback function.
    <Function test_primary_succeeds>
      Test when primary function succeeds.
    <Function test_primary_fails_fallback_succeeds>
      Test fallback when primary fails.
    <Function test_both_fail>
      Test when both primary and fallback fail.
    <Function test_with_arguments>
      Test passing arguments to functions.
    <Function test_primary_eventually_succeeds>
      Test primary succeeds after retries.
    <Function test_exponential_backoff>
      Test exponential backoff between retries.
  <Class TestResilientCall>
    Test suite for resilient_call function.
    <Function test_basic_call>
      Test basic function call without protection.
    <Function test_with_retry>
      Test resilient call with retry.
    <Function test_with_circuit_breaker>
      Test resilient call with circuit breaker.
    <Function test_with_rate_limiter>
      Test resilient call with rate limiter.
    <Function test_with_timeout>
      Test resilient call with timeout.
    <Function test_combined_protections>
      Test with multiple protection mechanisms.
  <Class TestCustomExceptions>
    Test suite for custom exception classes.
    <Function test_exception_hierarchy>
      Test exception class hierarchy.
    <Function test_exception_creation>
      Test creating custom exceptions.
    <Function test_with_retry_decorator_custom_exceptions>
      Test retry decorator with custom exceptions.
  <Class TestIntegrationScenarios>
    Integration tests for retry utilities.
    <Function test_api_client_scenario>
      Test simulated API client with full protection.
    <Function test_cascading_fallback_scenario>
      Test cascading fallback pattern.
    <Function test_gradual_recovery_scenario>
      Test gradual recovery with circuit breaker.
  <Class TestEdgeCases>
    Test edge cases and error conditions.
    <Function test_zero_retries>
      Test with zero retries.
    <Function test_negative_parameters>
      Test handling of negative parameters.
    <Function test_very_long_delays>
      Test handling of very long delays.
    <Function test_function_with_side_effects>
      Test retry with functions that have side effects.
    <Function test_concurrent_rate_limiting>
      Test rate limiter with concurrent access.

==================================== ERRORS ====================================
______________________ ERROR collecting tests/test_cli.py ______________________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/test_cli.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_cli.py:13: in <module>
    from cli import main, load_podcast_configs, seed_podcasts, health_check, validate_config
E   ModuleNotFoundError: No module named 'cli'
______________ ERROR collecting tests/test_component_baselines.py ______________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/test_component_baselines.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_component_baselines.py:16: in <module>
    from src.seeding import PodcastKnowledgePipeline
E   ImportError: cannot import name 'PodcastKnowledgePipeline' from 'src.seeding' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/seeding/__init__.py)
__________________ ERROR collecting tests/api/test_health.py ___________________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/api/test_health.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/api/test_health.py:7: in <module>
    from src.api.health import (
E   ImportError: cannot import name 'ComponentHealth' from 'src.api.health' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/api/health.py)
___________ ERROR collecting tests/integration/test_api_contracts.py ___________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/integration/test_api_contracts.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_api_contracts.py:12: in <module>
    from src.api.v1.seeding import (
E   ModuleNotFoundError: No module named 'src.api.v1.seeding'
________ ERROR collecting tests/integration/test_checkpoint_recovery.py ________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/integration/test_checkpoint_recovery.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_checkpoint_recovery.py:16: in <module>
    from src.seeding.orchestrator import PodcastKnowledgePipeline
E   ImportError: cannot import name 'PodcastKnowledgePipeline' from 'src.seeding.orchestrator' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/seeding/orchestrator.py)
___________ ERROR collecting tests/integration/test_cli_commands.py ____________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/integration/test_cli_commands.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_cli_commands.py:15: in <module>
    from cli import main, seed_podcasts, health_check, validate_config, schema_stats
E   ModuleNotFoundError: No module named 'cli'
__ ERROR collecting tests/integration/test_comprehensive_extraction_modes.py ___
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/integration/test_comprehensive_extraction_modes.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_comprehensive_extraction_modes.py:20: in <module>
    from src.seeding.orchestrator import PodcastKnowledgePipeline
E   ImportError: cannot import name 'PodcastKnowledgePipeline' from 'src.seeding.orchestrator' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/seeding/orchestrator.py)
_____ ERROR collecting tests/integration/test_golden_outputs_validation.py _____
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/integration/test_golden_outputs_validation.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_golden_outputs_validation.py:14: in <module>
    from src.processing.extraction import KnowledgeExtractor
E   ModuleNotFoundError: No module named 'src.processing.extraction'
________ ERROR collecting tests/integration/test_minimal_schemaless.py _________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/integration/test_minimal_schemaless.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_minimal_schemaless.py:8: in <module>
    from src.factories.provider_factory import ProviderFactory
E   ModuleNotFoundError: No module named 'src.factories'
___________ ERROR collecting tests/integration/test_orchestrator.py ____________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/integration/test_orchestrator.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_orchestrator.py:11: in <module>
    from src.seeding.orchestrator import PodcastKnowledgePipeline
E   ImportError: cannot import name 'PodcastKnowledgePipeline' from 'src.seeding.orchestrator' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/seeding/orchestrator.py)
______ ERROR collecting tests/integration/test_performance_benchmarks.py _______
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/integration/test_performance_benchmarks.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_performance_benchmarks.py:18: in <module>
    from src.processing.extraction import KnowledgeExtractor
E   ModuleNotFoundError: No module named 'src.processing.extraction'
________ ERROR collecting tests/integration/test_schemaless_pipeline.py ________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/integration/test_schemaless_pipeline.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_schemaless_pipeline.py:11: in <module>
    from src.providers.embeddings.mock import MockEmbeddingProvider
E   ModuleNotFoundError: No module named 'src.providers'
__________ ERROR collecting tests/integration/test_signal_handling.py __________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/integration/test_signal_handling.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_signal_handling.py:14: in <module>
    from src.seeding.orchestrator import PodcastKnowledgePipeline
E   ImportError: cannot import name 'PodcastKnowledgePipeline' from 'src.seeding.orchestrator' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/seeding/orchestrator.py)
_______ ERROR collecting tests/integration/test_vtt_batch_processing.py ________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/integration/test_vtt_batch_processing.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_vtt_batch_processing.py:19: in <module>
    from src.processing.vtt_parser import VTTParser
E   ModuleNotFoundError: No module named 'src.processing.vtt_parser'
______________ ERROR collecting tests/integration/test_vtt_e2e.py ______________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/integration/test_vtt_e2e.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_vtt_e2e.py:13: in <module>
    from src.core.models import Entity, EntityType, Relationship, RelationshipType
E   ImportError: cannot import name 'Relationship' from 'src.core.models' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/core/models.py)
_________ ERROR collecting tests/performance/test_domain_diversity.py __________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/performance/test_domain_diversity.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/performance/test_domain_diversity.py:11: in <module>
    from src.providers.embeddings.mock import MockEmbeddingProvider
E   ModuleNotFoundError: No module named 'src.providers'
____ ERROR collecting tests/performance/test_vtt_performance_benchmarks.py _____
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/performance/test_vtt_performance_benchmarks.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/performance/test_vtt_performance_benchmarks.py:18: in <module>
    from src.processing.extraction import KnowledgeExtractor
E   ModuleNotFoundError: No module named 'src.processing.extraction'
________ ERROR collecting tests/processing/test_complexity_analysis.py _________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_complexity_analysis.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/processing/test_complexity_analysis.py:9: in <module>
    from src.processing.complexity_analysis import (
E   ModuleNotFoundError: No module named 'src.processing.complexity_analysis'
___________ ERROR collecting tests/processing/test_discourse_flow.py ___________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_discourse_flow.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/processing/test_discourse_flow.py:10: in <module>
    from src.processing.discourse_flow import DiscourseFlowTracker
E   ModuleNotFoundError: No module named 'src.processing.discourse_flow'
__________ ERROR collecting tests/processing/test_emergent_themes.py ___________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_emergent_themes.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/processing/test_emergent_themes.py:10: in <module>
    from src.processing.emergent_themes import EmergentThemeDetector
E   ModuleNotFoundError: No module named 'src.processing.emergent_themes'
_______ ERROR collecting tests/processing/test_enhanced_gap_analysis.py ________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_enhanced_gap_analysis.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/processing/test_enhanced_gap_analysis.py:10: in <module>
    from src.processing.graph_analysis import GraphAnalyzer, StructuralGap
E   ModuleNotFoundError: No module named 'src.processing.graph_analysis'
_________ ERROR collecting tests/processing/test_entity_resolution.py __________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_entity_resolution.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/processing/test_entity_resolution.py:11: in <module>
    from src.processing.entity_resolution import (
E   ModuleNotFoundError: No module named 'src.processing.entity_resolution'
_____________ ERROR collecting tests/processing/test_extraction.py _____________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_extraction.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/processing/test_extraction.py:8: in <module>
    from src.processing.extraction import KnowledgeExtractor, ExtractionConfig
E   ModuleNotFoundError: No module named 'src.processing.extraction'
___________ ERROR collecting tests/processing/test_graph_analysis.py ___________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_graph_analysis.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/processing/test_graph_analysis.py:11: in <module>
    from src.processing.graph_analysis import (
E   ModuleNotFoundError: No module named 'src.processing.graph_analysis'
_________ ERROR collecting tests/processing/test_importance_scoring.py _________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_importance_scoring.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/processing/test_importance_scoring.py:11: in <module>
    from src.processing.importance_scoring import ImportanceScorer
E   ModuleNotFoundError: No module named 'src.processing.importance_scoring'
______________ ERROR collecting tests/processing/test_parsers.py _______________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_parsers.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/processing/test_parsers.py:10: in <module>
    from src.processing.parsers import ResponseParser, ParseResult, ValidationUtils
E   ModuleNotFoundError: No module named 'src.processing.parsers'
____________ ERROR collecting tests/processing/test_preprocessor.py ____________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_preprocessor.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/processing/test_preprocessor.py:10: in <module>
    from src.processing.preprocessor import (
E   ModuleNotFoundError: No module named 'src.processing.preprocessor'
______________ ERROR collecting tests/processing/test_prompts.py _______________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_prompts.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/processing/test_prompts.py:8: in <module>
    from src.processing.prompts import PromptBuilder, PromptTemplate
E   ModuleNotFoundError: No module named 'src.processing.prompts'
___________ ERROR collecting tests/processing/test_vtt_extraction.py ___________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_vtt_extraction.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/processing/test_vtt_extraction.py:13: in <module>
    from src.processing.extraction import KnowledgeExtractor, ExtractionResult
E   ModuleNotFoundError: No module named 'src.processing.extraction'
_____________ ERROR collecting tests/processing/test_vtt_parser.py _____________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_vtt_parser.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/processing/test_vtt_parser.py:11: in <module>
    from src.processing.vtt_parser import VTTParser, VTTCue
E   ModuleNotFoundError: No module named 'src.processing.vtt_parser'
______________ ERROR collecting tests/seeding/test_concurrency.py ______________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/seeding/test_concurrency.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/seeding/test_concurrency.py:12: in <module>
    from src.seeding.concurrency import (
E   ImportError: cannot import name 'Priority' from 'src.seeding.concurrency' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/seeding/concurrency.py)
____________ ERROR collecting tests/unit/test_entity_resolution.py _____________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_entity_resolution.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_entity_resolution.py:9: in <module>
    from src.processing.entity_resolution import EntityResolver, EntityResolutionConfig
E   ModuleNotFoundError: No module named 'src.processing.entity_resolution'
_______________ ERROR collecting tests/unit/test_error_budget.py _______________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_error_budget.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_error_budget.py:14: in <module>
    from src.core.error_budget import (
E   ModuleNotFoundError: No module named 'src.core.error_budget'
___________ ERROR collecting tests/unit/test_error_handling_utils.py ___________
venv/lib/python3.11/site-packages/_pytest/python.py:617: in _importtestmodule
    mod = import_path(self.path, mode=importmode, root=self.config.rootpath)
venv/lib/python3.11/site-packages/_pytest/pathlib.py:567: in import_path
    importlib.import_module(module_name)
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1206: in _gcd_import
    ???
<frozen importlib._bootstrap>:1178: in _find_and_load
    ???
<frozen importlib._bootstrap>:1149: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
venv/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
venv/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:359: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/usr/lib/python3.11/ast.py:50: in parse
    return compile(source, filename, mode, flags,
E     File "/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_error_handling_utils.py", line 40
E       """Test custom exception classes."""
E          ^^^^
E   SyntaxError: invalid syntax
__________ ERROR collecting tests/unit/test_extraction_integration.py __________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_extraction_integration.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_extraction_integration.py:14: in <module>
    from src.processing.extraction import (
E   ModuleNotFoundError: No module named 'src.processing.extraction'
_____________ ERROR collecting tests/unit/test_extraction_unit.py ______________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_extraction_unit.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_extraction_unit.py:14: in <module>
    from src.processing.extraction import (
E   ModuleNotFoundError: No module named 'src.processing.extraction'
______________ ERROR collecting tests/unit/test_graph_analysis.py ______________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_graph_analysis.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_graph_analysis.py:11: in <module>
    from src.processing.graph_analysis import (
E   ModuleNotFoundError: No module named 'src.processing.graph_analysis'
_____________ ERROR collecting tests/unit/test_interfaces_full.py ______________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_interfaces_full.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_interfaces_full.py:17: in <module>
    from src.core.interfaces import (
E   ImportError: cannot import name 'AudioProvider' from 'src.core.interfaces' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/core/interfaces.py)
_________________ ERROR collecting tests/unit/test_logging.py __________________
venv/lib/python3.11/site-packages/_pytest/python.py:617: in _importtestmodule
    mod = import_path(self.path, mode=importmode, root=self.config.rootpath)
venv/lib/python3.11/site-packages/_pytest/pathlib.py:567: in import_path
    importlib.import_module(module_name)
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1206: in _gcd_import
    ???
<frozen importlib._bootstrap>:1178: in _find_and_load
    ???
<frozen importlib._bootstrap>:1149: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
venv/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
venv/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:359: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/usr/lib/python3.11/ast.py:50: in parse
    return compile(source, filename, mode, flags,
E     File "/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_logging.py", line 31
E       LevelFilter,
E       ^^^^^^^^^^^
E   SyntaxError: invalid syntax
______________ ERROR collecting tests/unit/test_logging_utils.py _______________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_logging_utils.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_logging_utils.py:12: in <module>
    from src.utils.logging import (
E   ImportError: cannot import name 'ContextFilter' from 'src.utils.logging' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/utils/logging.py)
_________________ ERROR collecting tests/unit/test_metrics.py __________________
import file mismatch:
imported module 'test_metrics' has this __file__ attribute:
  /home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/processing/test_metrics.py
which is not the same as the test file we want to collect:
  /home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_metrics.py
HINT: remove __pycache__ / .pyc files and/or use a unique basename for your test file modules
__________ ERROR collecting tests/unit/test_orchestrator_scenarios.py __________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_orchestrator_scenarios.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_orchestrator_scenarios.py:19: in <module>
    from src.seeding.orchestrator import PodcastKnowledgePipeline
E   ImportError: cannot import name 'PodcastKnowledgePipeline' from 'src.seeding.orchestrator' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/seeding/orchestrator.py)
____________ ERROR collecting tests/unit/test_orchestrator_unit.py _____________
venv/lib/python3.11/site-packages/_pytest/python.py:617: in _importtestmodule
    mod = import_path(self.path, mode=importmode, root=self.config.rootpath)
venv/lib/python3.11/site-packages/_pytest/pathlib.py:567: in import_path
    importlib.import_module(module_name)
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1206: in _gcd_import
    ???
<frozen importlib._bootstrap>:1178: in _find_and_load
    ???
<frozen importlib._bootstrap>:1149: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
venv/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
venv/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:359: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/usr/lib/python3.11/ast.py:50: in parse
    return compile(source, filename, mode, flags,
E     File "/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_orchestrator_unit.py", line 25
E       from src.seeding.orchestrator import PodcastKnowledgePipeline
E       ^^^^
E   SyntaxError: invalid syntax
_________________ ERROR collecting tests/unit/test_parsers.py __________________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_parsers.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_parsers.py:13: in <module>
    from src.processing.parsers import (
E   ModuleNotFoundError: No module named 'src.processing.parsers'
___________ ERROR collecting tests/unit/test_rate_limiting_utils.py ____________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_rate_limiting_utils.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_rate_limiting_utils.py:11: in <module>
    from src.utils.rate_limiting import (
E   ImportError: cannot import name 'SlidingWindowRateLimiter' from 'src.utils.rate_limiting' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/utils/rate_limiting.py)
___________ ERROR collecting tests/unit/test_retry_comprehensive.py ____________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_retry_comprehensive.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_retry_comprehensive.py:12: in <module>
    from src.utils.retry import (
E   ImportError: cannot import name 'RetryError' from 'src.utils.retry' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/utils/retry.py)
_______________ ERROR collecting tests/unit/test_retry_utils.py ________________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_retry_utils.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_retry_utils.py:9: in <module>
    from src.utils.retry import (
E   ImportError: cannot import name 'retry_with_backoff' from 'src.utils.retry' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/utils/retry.py)
_______________ ERROR collecting tests/unit/test_segmentation.py _______________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_segmentation.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_segmentation.py:12: in <module>
    from src.processing.segmentation import (
E   ImportError: cannot import name 'EnhancedPodcastSegmenter' from 'src.processing.segmentation' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/processing/segmentation.py)
______ ERROR collecting tests/unit/test_text_processing_comprehensive.py _______
venv/lib/python3.11/site-packages/_pytest/python.py:617: in _importtestmodule
    mod = import_path(self.path, mode=importmode, root=self.config.rootpath)
venv/lib/python3.11/site-packages/_pytest/pathlib.py:567: in import_path
    importlib.import_module(module_name)
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1206: in _gcd_import
    ???
<frozen importlib._bootstrap>:1178: in _find_and_load
    ???
<frozen importlib._bootstrap>:1149: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:690: in _load_unlocked
    ???
venv/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:177: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
venv/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:359: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
/usr/lib/python3.11/ast.py:50: in parse
    return compile(source, filename, mode, flags,
E     File "/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_text_processing_comprehensive.py", line 144
E       text = ""Hello" 'World' «Test»"
E                ^^^^^
E   SyntaxError: invalid syntax
__________ ERROR collecting tests/unit/test_text_processing_utils.py ___________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_text_processing_utils.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_text_processing_utils.py:7: in <module>
    from src.utils.text_processing import (
E   ImportError: cannot import name 'clean_segment_text' from 'src.utils.text_processing' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/utils/text_processing.py)
_________ ERROR collecting tests/unit/test_validation_comprehensive.py _________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_validation_comprehensive.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_validation_comprehensive.py:10: in <module>
    from src.utils.validation import (
src/utils/validation.py:9: in <module>
    from src.utils.text_processing import normalize_entity_name, calculate_name_similarity
E   ImportError: cannot import name 'normalize_entity_name' from 'src.utils.text_processing' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/utils/text_processing.py)
_____________ ERROR collecting tests/unit/test_validation_utils.py _____________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/unit/test_validation_utils.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/unit/test_validation_utils.py:8: in <module>
    from src.utils.validation import (
src/utils/validation.py:9: in <module>
    from src.utils.text_processing import normalize_entity_name, calculate_name_similarity
E   ImportError: cannot import name 'normalize_entity_name' from 'src.utils.text_processing' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/utils/text_processing.py)
_____________ ERROR collecting tests/utils/test_text_processing.py _____________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/utils/test_text_processing.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/utils/test_text_processing.py:9: in <module>
    from src.utils.text_processing import (
E   ImportError: cannot import name 'clean_segment_text' from 'src.utils.text_processing' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/utils/text_processing.py)
_______________ ERROR collecting tests/utils/test_validation.py ________________
ImportError while importing test module '/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/tests/utils/test_validation.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/usr/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/utils/test_validation.py:10: in <module>
    from src.utils.validation import (
src/utils/validation.py:9: in <module>
    from src.utils.text_processing import normalize_entity_name, calculate_name_similarity
E   ImportError: cannot import name 'normalize_entity_name' from 'src.utils.text_processing' (/home/sergeblumenfeld/podcastknowledge/seeding_pipeline/src/utils/text_processing.py)
=============================== warnings summary ===============================
venv/lib/python3.11/site-packages/pythonjsonlogger/jsonlogger.py:11
  /home/sergeblumenfeld/podcastknowledge/seeding_pipeline/venv/lib/python3.11/site-packages/pythonjsonlogger/jsonlogger.py:11: DeprecationWarning: pythonjsonlogger.jsonlogger has been moved to pythonjsonlogger.json
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform linux, python 3.11.2-final-0 -----------
Name                                             Stmts   Miss Branch BrPart   Cover   Missing
---------------------------------------------------------------------------------------------
src/api/app.py                                      75     75      8      0   0.00%   3-161
src/api/health.py                                   87     63      6      0  25.81%   27-28, 32-59, 68-85, 94-100, 114-116, 127, 142-144, 149, 154, 159, 174-214
src/api/metrics.py                                 250    205     52      0  14.90%   33-37, 41-43, 51-53, 57-58, 66-68, 72-74, 78-80, 84-85, 94-97, 101-108, 112-118, 127-129, 133-142, 148-154, 168-293, 297-313, 317-393, 397, 427-429, 434-465, 470-499, 505-535
src/api/metrics_integration.py                      82     82     10      0   0.00%   8-201
src/api/v1/podcast_api.py                           57     44     20      0  16.88%   22-29, 52-116, 141-170
src/cli/cli.py                                     231    231     82      0   0.00%   8-527
src/core/config.py                                 168     90     50      0  35.78%   18-19, 24-26, 88-102, 106-142, 149-158, 163-177, 218-222, 226, 239, 247-270, 292-314, 320, 329
src/core/env_config.py                              55     55     14      0   0.00%   8-192
src/core/exceptions.py                              98     53     30      0  35.16%   33-36, 40-43, 55, 72, 89, 101, 118, 136-142, 160-163, 174, 192, 210-214, 232-238, 256-260, 278-284, 306, 322, 338
src/core/extraction_interface.py                    51     51      0      0   0.00%   8-153
src/core/feature_flags.py                           77     42     14      0  38.46%   43, 51-90, 102-123, 133-137, 146-154, 158-159, 169-171, 184, 195, 205, 222-230
src/core/interfaces.py                              71     14      0      0  80.28%   27, 69, 88, 97, 118, 131, 140, 149, 166, 178, 187, 231, 243, 255
src/core/models.py                                 232     36     20      0  77.78%   78, 126, 172, 226, 264, 296, 330, 357, 375, 406, 424-431, 436-443, 448-457
src/core/plugin_discovery.py                        89     89     20      0   0.00%   3-277
src/extraction/complexity_analysis.py              248    199    102      0  14.00%   60-87, 104-172, 185-202, 222-275, 295-317, 332-367, 396-437, 459-500, 515-569, 598-653, 668-703
src/extraction/entity_resolution.py                331    269    160      0  12.63%   65-108, 125-143, 157-161, 174-192, 197-310, 327-342, 356-391, 395-434, 448-468, 472-498, 503-535, 546-554, 559-586, 590-597, 602-611, 615-619, 624-647, 651, 661-674, 685, 697, 724-757, 762-773, 780-797, 804-814
src/extraction/extraction.py                       160    118     54      0  19.63%   67-88, 114-161, 170-207, 216-257, 266-301, 305-316, 320, 325-326, 330-336, 340-360, 364-375, 379-390, 395-427, 447-448, 462-463
src/extraction/importance_scoring.py               262    242    130      0   5.10%   48-50, 67-85, 102-135, 152-181, 198-244, 266-335, 359-405, 423-485, 500-615, 625-630, 642, 655-693
src/extraction/parsers.py                          256    256     92      0   0.00%   3-580
src/extraction/preprocessor.py                     194    148     84      0  16.55%   59-86, 118-179, 198-215, 227-234, 247-260, 274-282, 295-304, 308-312, 316-327, 340-349, 362-408, 421, 437-482, 494-522, 542-554
src/extraction/prompts.py                          157    157     32      0   0.00%   3-639
src/processing/adapters/schemaless_adapter.py       85     85      8      0   0.00%   8-256
src/processing/episode_flow.py                     479    421    248      0   7.98%   29, 41-79, 83-91, 101-114, 118-132, 141-158, 175-211, 219-239, 249-270, 279-297, 315-350, 360-388, 392-401, 405-427, 444-472, 477-488, 492-500, 504-512, 517-527, 532-543, 547-558, 575-591, 595-602, 611-629, 633-648, 652-664, 668-685, 697-726, 731-738, 744-748, 765-796, 805-809, 817-832, 836-850, 854-862, 874-884, 888-895, 899-903, 907-916, 920-927, 931-939, 943-959, 963-986, 998-1045, 1050-1058, 1062-1072, 1089-1133, 1138-1146, 1150-1157
src/processing/metrics.py                          162    117     38      0  22.50%   57-74, 98-142, 171-212, 239-290, 315-367, 397-431, 442-467, 471-482, 486
src/processing/segmentation.py                      84     63     30      0  18.42%   49-62, 76-92, 107-133, 145-157, 174-211, 228-260
src/seeding/batch_processor.py                     270    220     82      0  14.20%   59-83, 100-126, 130-148, 152-161, 167-200, 206-223, 235-286, 290-313, 317-326, 331-359, 363-388, 396-410, 418-421, 433-437, 449-452, 456-462, 466-469, 473, 477-496, 512-524, 542-573
src/seeding/checkpoint.py                          373    317    134      0  11.05%   46, 82-106, 125-129, 137-208, 216-228, 244-248, 255-300, 313-323, 334-361, 369-408, 419-441, 449-494, 506-538, 550-578, 591-618, 626-633, 648-681, 689-704, 708-716, 727-751, 763-779, 787-810, 821-848
src/seeding/checkpoint_compatibility.py            118    118     32      0   0.00%   8-285
src/seeding/components/checkpoint_manager.py        34     17      0      0  50.00%   20-35, 46-47, 59-60, 75, 89, 97, 105, 114, 122, 133, 141
src/seeding/components/pipeline_executor.py        104     84     16      0  16.67%   29-42, 60-90, 102-113, 131-197, 216-310, 322, 332, 347-361, 380-383
src/seeding/components/provider_coordinator.py      56     41      6      0  24.19%   26-39, 50-117, 121-128
src/seeding/components/signal_manager.py            34     22      6      0  30.00%   15-18, 26-32, 41-51, 55-60, 69
src/seeding/concurrency.py                          52     32     12      0  31.25%   25-27, 31-34, 38-42, 56-59, 72-76, 81-86, 105-108, 115-117, 134-137
src/seeding/orchestrator.py                        127    100     28      0  17.42%   46-77, 81-94, 105-147, 151-158, 176-185, 202-301, 309-316
src/seeding/transcript_ingestion.py                159    118     42      0  20.40%   33-36, 48-50, 66-82, 93-124, 135-139, 151-159, 170-177, 191-223, 242-250, 281-310, 321-328, 339-344, 355-362, 373, 390-392, 407-440
src/services/embeddings.py                          87     75     22      0  11.01%   24-29, 33-50, 64-85, 96-143, 151-168, 180-194, 209-218
src/services/llm.py                                 64     52     16      0  15.00%   24-34, 54-69, 84-113, 127-170, 181, 189
src/storage/graph_storage.py                       134    113     30      0  12.80%   28-44, 48-64, 68-76, 80-86, 91-99, 111-134, 146-176, 192-206, 223-273, 277-289, 297-305
src/storage/storage_coordinator.py                  81     62     28      0  17.43%   22-24, 40-71, 79, 96-112, 121, 135-148, 162-165, 179, 188-218, 231-232, 246-250, 267-302, 324-333
src/utils/component_tracker.py                     199    115     52      0  33.47%   81-86, 98, 102-111, 115-129, 133-155, 160-179, 197-201, 206-241, 246-280, 284-301, 308-312, 316-322, 326-333, 337, 347, 351, 355, 359-360, 364-365, 369, 392-406, 419-420, 426, 436-437, 447-449, 454
src/utils/debugging.py                             179    124     52      0  23.81%   47, 61, 78-108, 112-130, 134-159, 180-220, 239-257, 265, 314-330, 348-388, 396, 416-421, 427-435, 442, 449, 455-464, 471
src/utils/deprecation.py                            67     67     20      0   0.00%   7-240
src/utils/error_handling.py                        104    104     24      0   0.00%   8-296
src/utils/logging.py                               115     85     28      0  20.98%   25-26, 37, 42, 47-50, 59-92, 111-150, 169-216, 232-241, 259-269, 279-304, 311
src/utils/memory.py                                 17     12      0      0  29.41%   14-15, 24-33
src/utils/naming_guidelines.py                      36     36      8      0   0.00%   9-237
src/utils/patterns.py                              119     64     42      1  36.02%   168->176, 171-174, 180-183, 187-190, 202-212, 224-238, 251-269, 281-327, 342-343, 357-369, 373, 377-379, 397-407
src/utils/performance_decorator.py                 121    121     32      0   0.00%   7-276
src/utils/performance_profiling.py                 175    175     44      0   0.00%   7-443
src/utils/rate_limiting.py                         116     90     48      0  15.85%   42-47, 51-52, 56-59, 67-68, 72-73, 83-86, 106-115, 119-149, 153-165, 169-170, 174-212, 217-228, 232, 244, 248, 255-256, 260-261, 265
src/utils/resources.py                             254    203     48      0  16.89%   24-27, 45-52, 68-71, 82-93, 104-115, 120-125, 129, 133, 150-160, 175-182, 194-198, 214-233, 247-262, 270-280, 288-295, 303-312, 329-334, 343-356, 364-372, 376-379, 388-392, 396-397, 412-414, 422-425, 429-436, 440, 444, 458-478, 487-524, 538-569
src/utils/retry.py                                 187    144     50      0  18.14%   23-25, 29-31, 35, 77-120, 128-143, 166-172, 177-182, 186-195, 199-202, 206-214, 218-221, 247-272, 285-288, 299-312, 316-322, 358-389
src/utils/text_processing.py                       107     93     46      0   9.15%   22-31, 43-51, 63-77, 91-101, 113-144, 164-178, 190-212, 224-252, 264-279, 291-309
src/utils/validation.py                            173    167     70      0   2.47%   10-438
src/vtt/vtt_parser.py                              129     97     40      0  18.93%   42, 56-65, 80-87, 98-163, 167, 178-188, 199-207, 218-221, 232-245, 259-293, 307-313
src/vtt/vtt_segmentation.py                         86     65     30      0  18.10%   48-59, 73-89, 104-131, 144-159, 176-216, 233-265
---------------------------------------------------------------------------------------------
TOTAL                                             7976   6338   2392      1  15.83%

2 files skipped due to complete coverage.
Coverage HTML written to dir htmlcov
Coverage XML written to file coverage.xml

=========================== short test summary info ============================
ERROR tests/test_cli.py
ERROR tests/test_component_baselines.py
ERROR tests/api/test_health.py
ERROR tests/integration/test_api_contracts.py
ERROR tests/integration/test_checkpoint_recovery.py
ERROR tests/integration/test_cli_commands.py
ERROR tests/integration/test_comprehensive_extraction_modes.py
ERROR tests/integration/test_golden_outputs_validation.py
ERROR tests/integration/test_minimal_schemaless.py
ERROR tests/integration/test_orchestrator.py
ERROR tests/integration/test_performance_benchmarks.py
ERROR tests/integration/test_schemaless_pipeline.py
ERROR tests/integration/test_signal_handling.py
ERROR tests/integration/test_vtt_batch_processing.py
ERROR tests/integration/test_vtt_e2e.py
ERROR tests/performance/test_domain_diversity.py
ERROR tests/performance/test_vtt_performance_benchmarks.py
ERROR tests/processing/test_complexity_analysis.py
ERROR tests/processing/test_discourse_flow.py
ERROR tests/processing/test_emergent_themes.py
ERROR tests/processing/test_enhanced_gap_analysis.py
ERROR tests/processing/test_entity_resolution.py
ERROR tests/processing/test_extraction.py
ERROR tests/processing/test_graph_analysis.py
ERROR tests/processing/test_importance_scoring.py
ERROR tests/processing/test_parsers.py
ERROR tests/processing/test_preprocessor.py
ERROR tests/processing/test_prompts.py
ERROR tests/processing/test_vtt_extraction.py
ERROR tests/processing/test_vtt_parser.py
ERROR tests/seeding/test_concurrency.py
ERROR tests/unit/test_entity_resolution.py
ERROR tests/unit/test_error_budget.py
ERROR tests/unit/test_error_handling_utils.py
ERROR tests/unit/test_extraction_integration.py
ERROR tests/unit/test_extraction_unit.py
ERROR tests/unit/test_graph_analysis.py
ERROR tests/unit/test_interfaces_full.py
ERROR tests/unit/test_logging.py
ERROR tests/unit/test_logging_utils.py
ERROR tests/unit/test_metrics.py
ERROR tests/unit/test_orchestrator_scenarios.py
ERROR tests/unit/test_orchestrator_unit.py
ERROR tests/unit/test_parsers.py
ERROR tests/unit/test_rate_limiting_utils.py
ERROR tests/unit/test_retry_comprehensive.py
ERROR tests/unit/test_retry_utils.py
ERROR tests/unit/test_segmentation.py
ERROR tests/unit/test_text_processing_comprehensive.py
ERROR tests/unit/test_text_processing_utils.py
ERROR tests/unit/test_validation_comprehensive.py
ERROR tests/unit/test_validation_utils.py
ERROR tests/utils/test_text_processing.py
ERROR tests/utils/test_validation.py
!!!!!!!!!!!!!!!!!!! Interrupted: 54 errors during collection !!!!!!!!!!!!!!!!!!!
=================== 490 tests collected, 54 errors in 13.29s ===================
