API v1 Reference
================

This document provides a complete reference for the v1 API.

Core Functions
--------------

.. automodule:: src.api.v1.seeding
   :members: seed_podcast, seed_podcasts, get_api_version, check_api_compatibility
   :undoc-members:
   :show-inheritance:

Pipeline Class
--------------

.. autoclass:: src.api.v1.seeding.PodcastKnowledgePipeline
   :members:
   :undoc-members:
   :show-inheritance:
   :special-members: __init__

Response Schema
---------------

All v1 API functions return a dictionary with the following guaranteed fields:

.. code-block:: python

   {
       'start_time': str,              # ISO format timestamp
       'end_time': str,                # ISO format timestamp  
       'podcasts_processed': int,      # Number of podcasts processed
       'episodes_processed': int,      # Total episodes processed
       'episodes_failed': int,         # Number of failed episodes
       'processing_time_seconds': float,  # Total processing time
       'api_version': str,             # API version used ("1.0")
       # ... additional fields may be present
   }

Usage Examples
--------------

Basic Usage
~~~~~~~~~~~

.. code-block:: python

   from src.api.v1 import seed_podcast, seed_podcasts
   
   # Process a single podcast
   result = seed_podcast({
       'name': 'Tech Talk',
       'rss_url': 'https://example.com/feed.xml',
       'category': 'Technology'
   }, max_episodes=5)
   
   print(f"Processed {result['episodes_processed']} episodes")

Batch Processing
~~~~~~~~~~~~~~~~

.. code-block:: python

   # Process multiple podcasts
   podcasts = [
       {'name': 'Podcast 1', 'rss_url': 'https://...'},
       {'name': 'Podcast 2', 'rss_url': 'https://...'}
   ]
   
   result = seed_podcasts(podcasts, max_episodes_each=10)

Custom Configuration
~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   from src.core.config import Config
   
   # Create custom configuration
   config = Config()
   config.batch_size = 20
   config.checkpoint_enabled = True
   
   # Use with API
   result = seed_podcast(podcast_config, config=config)

Version Checking
~~~~~~~~~~~~~~~~

.. code-block:: python

   from src.api.v1 import get_api_version, check_api_compatibility
   
   # Get current version
   version = get_api_version()  # "1.0.0"
   
   # Check compatibility
   if check_api_compatibility("1.0"):
       print("API is compatible!")

Error Handling
--------------

The API handles errors gracefully and continues processing:

.. code-block:: python

   try:
       result = seed_podcast(podcast_config)
       
       if result['episodes_failed'] > 0:
           print(f"Warning: {result['episodes_failed']} episodes failed")
           
   except Exception as e:
       print(f"Critical error: {e}")

Deprecation Policy
------------------

The v1 API follows semantic versioning:

- **Major version (1.x.x)**: Backward compatibility guaranteed
- **Minor version (x.1.x)**: New features, backward compatible
- **Patch version (x.x.1)**: Bug fixes only

Deprecated functions will:
1. Show deprecation warnings for at least 2 minor versions
2. Continue working until the next major version
3. Provide migration guidance in warnings

Migration from v0
-----------------

If migrating from the pre-v1 API:

.. code-block:: python

   # Old way (v0)
   from src.seeding import PodcastKnowledgePipeline
   pipeline = PodcastKnowledgePipeline()
   pipeline.seed_podcast(...)
   
   # New way (v1)
   from src.api.v1 import seed_podcast
   result = seed_podcast(...)

Schemaless Mode (v1.1+)
-----------------------

The v1.1 API introduces schemaless extraction mode for flexible knowledge graph creation.

Configuration
~~~~~~~~~~~~~

Enable schemaless mode through configuration:

.. code-block:: python

   config = {
       'use_schemaless_extraction': True,
       'schemaless_confidence_threshold': 0.7,
       'entity_resolution_threshold': 0.85,
       'max_properties_per_node': 50,
       'relationship_normalization': True
   }
   
   result = seed_podcast(podcast_config, extraction_config=config)

New Parameters
~~~~~~~~~~~~~~

- **use_schemaless_extraction** (bool): Enable schemaless mode
- **schemaless_confidence_threshold** (float): Minimum confidence for entity extraction (0.0-1.0)
- **entity_resolution_threshold** (float): Similarity threshold for merging entities (0.0-1.0)
- **max_properties_per_node** (int): Maximum properties per graph node
- **relationship_normalization** (bool): Normalize relationship types (e.g., "works at" â†’ "WORKS_AT")

Flexible Return Types
~~~~~~~~~~~~~~~~~~~~

In schemaless mode, the response includes additional fields:

.. code-block:: python

   {
       # Standard fields...
       'extraction_mode': 'schemaless',
       'discovered_entity_types': ['Person', 'Organization', 'Technology', ...],
       'discovered_relationship_types': ['WORKS_AT', 'CREATED', ...],
       'schema_evolution': {
           'new_types': [...],
           'new_properties': {...}
       }
   }

Schema Discovery
~~~~~~~~~~~~~~~~

Query discovered schema after processing:

.. code-block:: python

   from src.api.v1 import get_discovered_schema
   
   schema = get_discovered_schema(graph_connection)
   print(f"Entity types: {schema['entity_types']}")
   print(f"Relationship types: {schema['relationship_types']}")
   print(f"Properties: {schema['properties']}")

Example: Processing Mixed-Domain Podcasts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   # Configure for diverse content
   config = {
       'use_schemaless_extraction': True,
       'entity_resolution_threshold': 0.9,  # Higher for mixed domains
       'max_properties_per_node': 100       # Allow more properties
   }
   
   # Process technology podcast
   tech_result = seed_podcast({
       'rss_url': 'https://example.com/tech-podcast.xml',
       'name': 'Tech Talks'
   }, extraction_config=config)
   
   # Process cooking podcast - schema adapts automatically
   cooking_result = seed_podcast({
       'rss_url': 'https://example.com/cooking-podcast.xml',
       'name': 'Kitchen Chronicles'
   }, extraction_config=config)
   
   # Schema now includes both domains
   print(f"Tech entities: {tech_result['discovered_entity_types']}")
   print(f"Cooking entities: {cooking_result['discovered_entity_types']}")

Migration Guide
~~~~~~~~~~~~~~~

Transitioning from fixed to schemaless schema:

1. **Gradual Migration**: Enable dual extraction mode

   .. code-block:: python

      config = {
          'use_schemaless_extraction': True,
          'dual_extraction_mode': True  # Run both modes
      }

2. **Query Translation**: Use compatibility layer

   .. code-block:: python

      from src.api.v1 import translate_query
      
      # Old fixed-schema query
      old_query = "MATCH (p:Person)-[:SPEAKS_IN]->(s:Segment) RETURN p"
      
      # Automatically translated
      new_query = translate_query(old_query, target='schemaless')

3. **Validation**: Compare results between modes

   .. code-block:: python

      from src.api.v1 import compare_extraction_modes
      
      comparison = compare_extraction_modes(
          podcast_config,
          metrics=['entity_count', 'relationship_count', 'property_coverage']
      )

Thread Safety
-------------

All v1 API functions are thread-safe and can be called concurrently:

.. code-block:: python

   from concurrent.futures import ThreadPoolExecutor
   from src.api.v1 import seed_podcast
   
   def process_podcast(config):
       return seed_podcast(config, max_episodes=5)
   
   with ThreadPoolExecutor(max_workers=3) as executor:
       futures = [executor.submit(process_podcast, cfg) for cfg in configs]
       results = [f.result() for f in futures]

Performance Considerations
--------------------------

- Use `max_episodes_each` parameter to limit processing
- Enable checkpoints for large podcasts
- Adjust `config.batch_size` based on available memory
- Set `use_large_context=False` for faster processing

See Also
--------

- :doc:`/configuration` - Configuration options
- :doc:`/guides/advanced_features` - Advanced usage patterns
- :doc:`/guides/troubleshooting` - Common issues and solutions