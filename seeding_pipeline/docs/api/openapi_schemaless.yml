openapi: 3.0.3
info:
  title: Podcast Knowledge Graph Pipeline API - Schemaless Extension
  description: |
    API extensions for schemaless (flexible schema) knowledge graph extraction.
    This extends the base v1 API with additional endpoints and parameters for schemaless mode.
  version: 1.1.0
  contact:
    name: API Support
    email: api-support@example.com

servers:
  - url: http://localhost:8000/api/v1
    description: Local development server
  - url: https://api.podcast-kg.example.com/v1
    description: Production server

paths:
  /seed:
    post:
      summary: Process podcast with schemaless extraction
      description: Process a podcast RSS feed using flexible schema extraction
      tags:
        - Seeding
        - Schemaless
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemalessSeeedRequest'
            examples:
              techPodcast:
                summary: Technology podcast with schemaless extraction
                value:
                  rss_url: "https://example.com/tech-podcast.xml"
                  name: "Tech Talks Daily"
                  extraction_config:
                    use_schemaless_extraction: true
                    schemaless_confidence_threshold: 0.7
                    entity_resolution_threshold: 0.85
      responses:
        '200':
          description: Successful processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemalessSeeedResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /schema/discover:
    get:
      summary: Get discovered schema
      description: Retrieve the dynamically discovered schema from schemaless extraction
      tags:
        - Schema Discovery
        - Schemaless
      parameters:
        - name: include_stats
          in: query
          description: Include usage statistics for each type
          schema:
            type: boolean
            default: false
        - name: filter_domain
          in: query
          description: Filter schema by domain/category
          schema:
            type: string
            enum: [technology, business, health, education, entertainment, all]
            default: all
      responses:
        '200':
          description: Discovered schema information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveredSchema'

  /query/translate:
    post:
      summary: Translate fixed schema query
      description: Translate a query from fixed schema to schemaless format
      tags:
        - Query Translation
        - Migration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: Cypher query using fixed schema
                  example: "MATCH (p:Person)-[:SPEAKS_IN]->(s:Segment) RETURN p"
                target_mode:
                  type: string
                  enum: [schemaless, compatible]
                  default: schemaless
      responses:
        '200':
          description: Translated query
          content:
            application/json:
              schema:
                type: object
                properties:
                  original_query:
                    type: string
                  translated_query:
                    type: string
                  warnings:
                    type: array
                    items:
                      type: string

  /extraction/compare:
    post:
      summary: Compare extraction modes
      description: Process the same content with both fixed and schemaless modes for comparison
      tags:
        - Migration
        - Testing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - test_content
              properties:
                test_content:
                  type: object
                  properties:
                    text:
                      type: string
                    speaker:
                      type: string
                    timestamp:
                      type: number
                metrics:
                  type: array
                  items:
                    type: string
                    enum: [entity_count, relationship_count, property_coverage, extraction_time]
      responses:
        '200':
          description: Comparison results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtractionComparison'

components:
  schemas:
    SchemalessSeeedRequest:
      type: object
      required:
        - rss_url
      properties:
        rss_url:
          type: string
          format: uri
          description: RSS feed URL of the podcast
        name:
          type: string
          description: Optional podcast name
        extraction_config:
          $ref: '#/components/schemas/SchemalessConfig'
        processing_options:
          type: object
          properties:
            max_episodes:
              type: integer
              minimum: 1
              default: 10
            dual_extraction_mode:
              type: boolean
              default: false
              description: Run both fixed and schemaless extraction

    SchemalessConfig:
      type: object
      properties:
        use_schemaless_extraction:
          type: boolean
          default: false
        schemaless_confidence_threshold:
          type: number
          minimum: 0
          maximum: 1
          default: 0.7
        entity_resolution_threshold:
          type: number
          minimum: 0
          maximum: 1
          default: 0.85
        max_properties_per_node:
          type: integer
          minimum: 1
          maximum: 1000
          default: 50
        relationship_normalization:
          type: boolean
          default: true
        component_settings:
          type: object
          properties:
            preprocessing:
              type: object
              properties:
                inject_timestamps:
                  type: boolean
                inject_speakers:
                  type: boolean
                inject_metadata:
                  type: boolean
            entity_resolution:
              type: object
              properties:
                use_fuzzy_matching:
                  type: boolean
                case_sensitive:
                  type: boolean
            quote_extraction:
              type: object
              properties:
                min_quote_length:
                  type: integer
                max_quote_length:
                  type: integer

    SchemalessSeeedResponse:
      allOf:
        - $ref: '#/components/schemas/BaseSeeedResponse'
        - type: object
          properties:
            extraction_mode:
              type: string
              enum: [fixed, schemaless, dual]
            discovered_entity_types:
              type: array
              items:
                type: string
            discovered_relationship_types:
              type: array
              items:
                type: string
            schema_evolution:
              type: object
              properties:
                new_types:
                  type: array
                  items:
                    type: string
                new_properties:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      type: string
            extraction_stats:
              type: object
              properties:
                entities_extracted:
                  type: integer
                relationships_created:
                  type: integer
                properties_added:
                  type: integer
                entities_resolved:
                  type: integer

    BaseSeeedResponse:
      type: object
      required:
        - start_time
        - end_time
        - podcasts_processed
        - episodes_processed
        - api_version
      properties:
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        podcasts_processed:
          type: integer
        episodes_processed:
          type: integer
        episodes_failed:
          type: integer
        processing_time_seconds:
          type: number
        api_version:
          type: string

    DiscoveredSchema:
      type: object
      properties:
        entity_types:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              count:
                type: integer
              properties:
                type: array
                items:
                  type: string
              first_seen:
                type: string
                format: date-time
              last_seen:
                type: string
                format: date-time
        relationship_types:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              count:
                type: integer
              source_types:
                type: array
                items:
                  type: string
              target_types:
                type: array
                items:
                  type: string
        property_usage:
          type: object
          additionalProperties:
            type: object
            properties:
              usage_count:
                type: integer
              value_types:
                type: array
                items:
                  type: string
                  enum: [string, number, boolean, datetime, array]

    ExtractionComparison:
      type: object
      properties:
        fixed_schema_results:
          type: object
          properties:
            entity_count:
              type: integer
            relationship_count:
              type: integer
            extraction_time_ms:
              type: number
        schemaless_results:
          type: object
          properties:
            entity_count:
              type: integer
            relationship_count:
              type: integer
            unique_types_discovered:
              type: integer
            extraction_time_ms:
              type: number
        comparison_metrics:
          type: object
          properties:
            entity_coverage_ratio:
              type: number
            relationship_coverage_ratio:
              type: number
            performance_ratio:
              type: number
            additional_insights:
              type: array
              items:
                type: string

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: object

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              trace_id:
                type: string

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer

security:
  - ApiKeyAuth: []
  - BearerAuth: []