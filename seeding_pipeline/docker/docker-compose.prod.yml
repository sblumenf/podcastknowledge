version: '3.8'

services:
  # Production application service
  app:
    image: your-registry/podcast-kg-pipeline:${VERSION:-latest}
    container_name: podcast-kg-app
    restart: unless-stopped
    environment:
      # Neo4j connection
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      # Redis connection
      - REDIS_URL=${REDIS_URL}
      # API keys
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      # Production settings
      - PODCAST_KG_LOG_LEVEL=INFO
      - PODCAST_KG_ENV=production
    volumes:
      - ./config:/app/config:ro
      - podcast_data:/app/data
      - podcast_logs:/app/logs
      - podcast_cache:/app/cache
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - podcast-kg-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # Neo4j database (production)
  neo4j:
    image: neo4j:5.12.0-enterprise
    container_name: podcast-kg-neo4j
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      # Production memory settings
      - NEO4J_dbms_memory_heap_initial__size=4G
      - NEO4J_dbms_memory_heap_max__size=8G
      - NEO4J_dbms_memory_pagecache_size=4G
      # Security
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*
      # Performance
      - NEO4J_dbms_checkpoint_interval_time=30m
      - NEO4J_dbms_checkpoint_iops_limit=600
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_backups:/backups
    networks:
      - podcast-kg-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 16G
        reservations:
          cpus: '2'
          memory: 12G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # Redis for caching (production)
  redis:
    image: redis:7-alpine
    container_name: podcast-kg-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 4gb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - podcast-kg-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: podcast-kg-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - podcast-kg-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: podcast-kg-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - podcast-kg-network
    profiles:
      - monitoring

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: podcast-kg-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - podcast-kg-network
    profiles:
      - monitoring

networks:
  podcast-kg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Application volumes
  podcast_data:
  podcast_logs:
  podcast_cache:
  
  # Neo4j volumes
  neo4j_data:
  neo4j_logs:
  neo4j_backups:
  
  # Redis volume
  redis_data:
  
  # Monitoring volumes
  nginx_logs:
  prometheus_data:
  grafana_data: