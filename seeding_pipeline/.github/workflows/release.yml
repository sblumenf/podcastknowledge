name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
      release_type:
        description: 'Release type'
        required: true
        default: 'minor'
        type: choice
        options:
          - major
          - minor
          - patch

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # Auto-increment based on release type
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${CURRENT_VERSION#v}
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "${{ github.event.inputs.release_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          VERSION="${MAJOR}.${MINOR}.${PATCH}"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
    
    - name: Update version in files
      run: |
        # Update version in __version__.py
        echo "__version__ = '${{ steps.version.outputs.version }}'" > src/__version__.py
        
        # Update version in pyproject.toml
        sed -i 's/version = ".*"/version = "${{ steps.version.outputs.version }}"/' pyproject.toml
        
        # Update version in setup.py
        sed -i "s/version='.*'/version='${{ steps.version.outputs.version }}'/" setup.py
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" | head -20)
        else
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)")
        fi
        
        # Save to file for artifact
        echo "# Changelog for v${{ steps.version.outputs.version }}" > RELEASE_CHANGELOG.md
        echo "" >> RELEASE_CHANGELOG.md
        echo "## Changes" >> RELEASE_CHANGELOG.md
        echo "$CHANGELOG" >> RELEASE_CHANGELOG.md
        
        # Save for output (escaped for JSON)
        CHANGELOG_ESCAPED=$(echo "$CHANGELOG" | jq -Rs .)
        echo "changelog=${CHANGELOG_ESCAPED}" >> $GITHUB_OUTPUT
    
    - name: Update CHANGELOG.md
      run: |
        # Update main CHANGELOG.md
        python scripts/update_changelog.py \
          --version "${{ steps.version.outputs.version }}" \
          --date "$(date +%Y-%m-%d)" || echo "Manual update needed"
    
    - name: Commit version bump
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        git add -A
        git commit -m "chore: Bump version to ${{ steps.version.outputs.version }}"
        git push
    
    - name: Upload changelog
      uses: actions/upload-artifact@v3
      with:
        name: release-changelog
        path: RELEASE_CHANGELOG.md

  create-release:
    name: Create Release
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
    
    - name: Create and push tag
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        git tag -a "v${{ needs.prepare-release.outputs.version }}" \
          -m "Release v${{ needs.prepare-release.outputs.version }}"
        git push origin "v${{ needs.prepare-release.outputs.version }}"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.prepare-release.outputs.version }}
        release_name: Release v${{ needs.prepare-release.outputs.version }}
        body: |
          # Release v${{ needs.prepare-release.outputs.version }}
          
          ## What's Changed
          ${{ fromJson(needs.prepare-release.outputs.changelog) }}
          
          ## Installation
          ```bash
          pip install podcast-kg-pipeline==${{ needs.prepare-release.outputs.version }}
          ```
          
          ## Docker
          ```bash
          docker pull ghcr.io/${{ github.repository }}:v${{ needs.prepare-release.outputs.version }}
          ```
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.prepare-release.outputs.previous_version }}...v${{ needs.prepare-release.outputs.version }}
        draft: false
        prerelease: false

  publish-pypi:
    name: Publish to PyPI
    needs: [prepare-release, create-release]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/podcast-kg-pipeline/
    steps:
    - uses: actions/checkout@v4
      with:
        ref: v${{ needs.prepare-release.outputs.version }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

  build-docker:
    name: Build and Push Docker Images
    needs: [prepare-release, create-release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: v${{ needs.prepare-release.outputs.version }}
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:v${{ needs.prepare-release.outputs.version }}
          ghcr.io/${{ github.repository }}:latest
          ${{ secrets.DOCKER_USERNAME }}/podcast-kg-pipeline:v${{ needs.prepare-release.outputs.version }}
          ${{ secrets.DOCKER_USERNAME }}/podcast-kg-pipeline:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-docs:
    name: Update Documentation
    needs: [prepare-release, create-release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install -r docs/requirements.txt
        pip install -e .
    
    - name: Build documentation
      run: |
        cd docs
        make clean
        make html
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        cname: docs.podcast-kg.example.com